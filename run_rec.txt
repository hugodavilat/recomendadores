Created by Yiding Liu at Nanyang Technological University.


All the models are written in pure Python, except for iGSLR and GeoMF.

For iGSLR:
The recommendation process is very time consuming. So we rewrite some bottleneck parts in C++, and use python to call via SWIG (http://www.swig.org/Doc1.3/Python.html) on Linux OS. To use iGSLR, please run recommendation.py. If error occurred, please use Linux OS, or check how to correctly compile the C++ parts using SWIG.

For GeoMF:
The weighted matrix factorization requires full-matrix inverse operation, which is very space-consuming. We use Matlab to implement, since the inverse operation is better optimized in Matlab. When using GeoMF, please run ./lib/GeographicalMatrixFactorization.m. The model will be stored in ./tmp. Then, run recommendation.py.

For other models:
Just run recommendations.py. See below for more details about running the models.



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



For each recommendation model, the file structure is 

./
|-- lib
|-- result
|-- tmp
|-- recommendation.py

./lib: files of the recommendation components used in the model (e.g., UCF, FCF and PD in USG model)
./result: store the recommendation results (i.e., POI id) for each user.
./tmp: store the intermediate variables, precomputed results and the model variables.

recommendation.py: the entry of the program. It usually contains 4 components:

1. Import all the necessary packages.
2. The functions of reading data.
3. Main function: main(). **Training parameters are set in this part**.
4. Global variables. **Model parameters are set in this part**.



The recommendation process is implemented in main(). Take MGMPFM as an example:


Firstly, load all the data we need:
=====================================================================
sparse_training_matrix, training_tuples = read_training_data()
ground_truth = read_ground_truth()
poi_coos = read_poi_coos()
=====================================================================


Secondly, call the method to train/save/load the model. The training parameters are set here.
=====================================================================
PFM.train(sparse_training_matrix, max_iters=10, learning_rate=1e-4)
PFM.save_model("./tmp/")
# PFM.load_model("./tmp/")
MGM.multi_center_discovering(sparse_training_matrix, poi_coos)
=====================================================================


Thirdly, perform recommendations for all users:
=====================================================================
for cnt, uid in enumerate(all_uids):
    if uid in ground_truth:
        overall_scores = [PFM.predict(uid, lid) * MGM.predict(uid, lid)
                          if (uid, lid) not in training_tuples else -1
                          for lid in all_lids]

        overall_scores = np.array(overall_scores)

        predicted = list(reversed(overall_scores.argsort()))[:top_k]
        actual = ground_truth[uid]

        precision.append(precisionk(actual, predicted[:10]))
        recall.append(recallk(actual, predicted[:10]))

        print(cnt, uid, "pre@10:", np.mean(precision), "rec@10:", np.mean(recall))
        result_out.write('\t'.join([
            str(cnt),
            str(uid),
            ','.join([str(lid) for lid in predicted])
        ]) + '\n')
=====================================================================



The parameters of each model is defined before calling main(). Take MGMPFM as an example:
=====================================================================
if __name__ == '__main__':
    data_dir = "../data/"

    size_file = data_dir + "Gowalla_data_size.txt"
    check_in_file = data_dir + "Gowalla_checkins.txt"
    train_file = data_dir + "Gowalla_train.txt"
    tune_file = data_dir + "Gowalla_tune.txt"
    test_file = data_dir + "Gowalla_test.txt"
    poi_file = data_dir + "Gowalla_poi_coos.txt"

    user_num, poi_num = open(size_file, 'r').readlines()[0].strip('\n').split()
    user_num, poi_num = int(user_num), int(poi_num)

    top_k = 100

    PFM = PoissonFactorModel(K=30, alpha=20.0, beta=0.2)
    MGM = MultiGaussianModel(alpha=0.2, theta=0.02, dmax=15)

    main()
=====================================================================
